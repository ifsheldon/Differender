import torch
import torch.nn.functional as F
import math
from torchvtk.utils import tex_from_pts, TFGenerator

__all__ = ['get_tf', 'in_circles', 'get_rand_pos']
def get_tf(id, res):
    if  id == 'tf1':
        return tex_from_pts(torch.tensor([[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
            [0.0840, 0.8510, 0.7230, 0.4672, 0.0000],
            [0.0850, 0.8510, 0.7230, 0.4672, 0.0831],
            [0.1844, 0.8510, 0.7230, 0.4672, 0.0801],
            [0.1890, 0.8510, 0.7230, 0.4672, 0.0000],
            [0.2444, 0.8667, 0.5166, 0.6566, 0.0000],
            [0.2528, 0.7176, 0.0675, 0.3276, 0.0782],
            [0.2621, 0.8667, 0.5166, 0.6566, 0.0000],
            [0.3407, 0.9843, 0.9843, 0.9843, 0.0000],
            [0.3601, 0.9843, 0.9843, 0.9843, 0.3904],
            [0.4475, 0.9843, 0.9843, 0.9843, 0.3917],
            [0.4655, 0.9843, 0.9843, 0.9843, 0.0000],
            [1.0000, 0.0000, 0.0000, 0.0000, 0.0000]]), res)
    elif id == 'tf2':
        return tex_from_pts(torch.tensor([[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
            [0.0178, 0.5333, 0.3597, 0.1861, 0.0000],
            [0.0206, 0.5333, 0.3597, 0.1861, 0.1834],
            [0.0361, 0.5333, 0.3597, 0.1861, 0.1804],
            [0.0388, 0.5333, 0.3597, 0.1861, 0.0000],
            [0.2224, 0.6902, 0.0839, 0.1951, 0.0000],
            [0.2274, 0.6902, 0.0839, 0.1951, 0.0880],
            [0.2479, 0.6902, 0.0839, 0.1951, 0.0831],
            [0.2515, 0.6902, 0.0839, 0.1951, 0.0000],
            [0.2857, 0.9843, 0.9843, 0.9843, 0.0000],
            [0.3042, 0.9843, 0.9843, 0.9843, 0.8240],
            [0.4540, 0.9843, 0.9843, 0.9843, 0.8172],
            [0.4916, 0.9843, 0.9843, 0.9843, 0.0000],
            [1.0000, 0.0000, 0.0000, 0.0000, 0.0000]]), res)
    elif id == 'tf3':
        return tex_from_pts(torch.tensor([[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
            [0.0279, 0.5991, 0.6235, 0.1345, 0.0000],
            [0.0477, 0.5991, 0.6235, 0.1345, 0.1736],
            [0.1090, 0.5991, 0.6235, 0.1345, 0.1779],
            [0.1304, 0.5991, 0.6235, 0.1345, 0.0000],
            [0.3654, 0.9843, 0.9843, 0.9843, 0.0000],
            [0.3991, 0.9843, 0.9843, 0.9843, 0.3912],
            [0.7440, 0.9843, 0.9843, 0.9843, 0.3893],
            [0.7850, 0.9843, 0.9843, 0.9843, 0.0000],
            [1.0000, 0.0000, 0.0000, 0.0000, 0.0000]]), res)
    elif id == 'tf4':
        return tex_from_pts(torch.tensor([[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
            [0.0916, 0.5059, 0.1627, 0.1627, 0.0000],
            [0.1204, 0.5059, 0.1627, 0.1627, 0.1932],
            [0.1865, 0.5059, 0.1627, 0.1627, 0.1956],
            [0.2120, 0.5059, 0.1627, 0.1627, 0.0000],
            [0.4841, 0.9176, 0.9176, 0.9176, 0.0000],
            [0.5195, 0.9176, 0.9176, 0.9176, 0.6406],
            [0.6609, 0.9176, 0.9176, 0.9176, 0.6362],
            [0.6968, 0.9176, 0.9176, 0.9176, 0.0000],
            [1.0000, 0.0000, 0.0000, 0.0000, 0.0000]]), res)
    elif id == 'tf5':
        return tex_from_pts(torch.tensor([[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
            [0.1300, 0.5000, 0.5000, 0.5000, 0.0000],
            [0.1350, 0.5000, 0.5000, 0.5000, 0.7500],
            [0.1600, 0.5000, 0.5000, 0.5000, 0.7500],
            [0.1700, 0.5000, 0.5000, 0.5000, 0.0000],
            [1.0000, 0.0000, 0.0000, 0.0000, 0.0000]]), res)
    elif id == 'black':
        return torch.zeros((4, res)) + 1e-2
    elif id == 'gray':
        temp = torch.ones((4, res)) * 0.5
        temp[3, :] = 0.02
        return temp
    elif id == 'rand':
        return torch.rand(4, res)
    elif id == 'generate':
        tfgen = TFGenerator(peakgen_kwargs={'max_num_peaks': 2})
        tf_ref = tex_from_pts(tfgen.generate(), res)
        return tf_ref
    else:
        raise Exception(f'Invalid Transfer function identifier given ({id}).')
def in_circles(i, y=0.7, dist=2.5):
    x = math.cos(i) * dist
    z = math.sin(i) * dist
    return torch.tensor([x, y, z], dtype=torch.float32)


def get_rand_pos(bs=None, dist=2.7):
    if bs is None:
        return F.normalize(torch.randn(3), dim=0) * dist
    else:
        return F.normalize(torch.randn(bs, 3), dim=1) * dist
